#!/usr/bin/python
"""Choice random files from directory trees and make link to them.
"""
#
# Copyright (c) 2012 Satoshi Fukutomi <info@fuktommy.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

from __future__ import division

import math
import optparse
import os
import mimetypes
import random
import sys


def parse_args(argv):
    usage = 'usage: %prog [options] [src-dir...]'
    parser = optparse.OptionParser(usage=usage)
    parser.add_option('-o', '--dst', dest='dst_dir',
                      default='./randomfile', metavar='DIR',
                      help='distination (output) directory. defaut: %default')
    parser.add_option('-r', '--rate', type='int', dest='rate',
                      default=10,
                      help='selection rate (0..100). default: %default')
    parser.add_option('-s', '--symlink', dest='symlink',
                      default=False, action='store_true',
                      help='make symbolic link instead of hard link')
    parser.add_option('--audio-only', dest='only_type_audio',
                      default=False, action='store_true',
                      help='link audio only')
    parser.add_option('--image-only', dest='only_type_image',
                      default=False, action='store_true',
                      help='link image only')
    parser.add_option('--video-only', dest='only_type_video',
                      default=False, action='store_true',
                      help='link video only')
    parser.add_option('-l', '--all-leaf', dest='all_leaf',
                      default=False, action='store_true',
                      help='select all child files in selected directories')
    parser.add_option('-n', '--dry-run', dest='dryrun',
                      default=False, action='store_true',
                      help='no action')
    parser.add_option('-v', '--verbose', dest='verbose',
                      default=False, action='store_true',
                      help='verbose output mode')
    return parser.parse_args(argv)


def get_filter(options):
    if options.only_type_audio:
        return AudioFilter()
    if options.only_type_image:
        return ImageFilter()
    if options.only_type_video:
        return VideoFilter()
    return PermeabilityFilter()


class PermeabilityFilter(object):
    def accept(self, path):
        return True


class AudioFilter(object):
    def accept(self, path):
        type, encoding = mimetypes.guess_type(path)
        if type and type.startswith('audio/'):
            return True
        lowpath = path.lower()
        suffix = ['.flac', '.m4a', '.mid', '.ogg', '.wma']
        for s in suffix:
            if lowpath.endswith(s):
                return True
        return False


class ImageFilter(object):
    def accept(self, path):
        type, encoding = mimetypes.guess_type(path)
        if type and type.startswith('image/'):
            return True
        return False


class VideoFilter(object):
    def accept(self, path):
        type, encoding = mimetypes.guess_type(path)
        if type and type.startswith('video/'):
            return True
        lowpath = path.lower()
        suffix = ['.asf', '.divx', '.flv', '.m4v', '.rm', '.webm', '.wmv']
        for s in suffix:
            if lowpath.endswith(s):
                return True
        return False


def search_dir(dir, rate, filter, all_leaf_mode=False):
    dirs = []
    files = []
    for f in os.listdir(dir):
        f = os.path.join(dir, f)
        if os.path.islink(f):
            continue
        if os.path.isfile(f) and filter.accept(f):
            files.append(f)
            continue
        if os.path.isdir(f):
            dirs.append(f)
            continue

    dirs = random.sample(dirs, int(math.ceil(len(dirs) * rate / 100)))
    dirs.sort()
    if not all_leaf_mode:
        files = random.sample(files, int(math.ceil(len(files) * rate / 100)))
    files.sort()

    for d in dirs:
        files.extend(search_dir(d, rate, filter, all_leaf_mode))
    return files


def main():
    options, src_dirs = parse_args(sys.argv[1:])
    if os.path.isdir(options.dst_dir):
        sys.exit(options.dst_dir + ' is exists.');

    filter = get_filter(options)
    src_files = []
    for dir in src_dirs:
        files = search_dir(
            os.path.abspath(dir),
            options.rate,
            filter,
            all_leaf_mode=options.all_leaf)
        src_files.extend(files)

    print "generating %d links..." % len(src_files)
    if options.dryrun and (not options.verbose):
        return

    if not options.dryrun:
        os.makedirs(options.dst_dir)
    if options.symlink:
        link = os.symlink
    else:
        link = os.link
    i = 0
    index_len = len(str(len(src_files)))
    for s in src_files:
        dst = os.path.join(options.dst_dir,
                           '%0*d_%s' % (index_len, i, os.path.basename(s)))
        if options.verbose:
            print '%s -> %s' % (s, dst)
        if not options.dryrun:
            link(s, dst)
        i += 1

if __name__ == '__main__':
    main()
